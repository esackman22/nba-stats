import pandas as pd
from sqlalchemy.orm import sessionmaker
from games import Games
from models import Players
from nba_api_client import NbaApiClient
from play_by_play import PlayByPlay
from player_comparator import PlayerComparator


def clean_and_return_games_and_pbp_dfs(raw_games_df: pd.DataFrame, raw_plays_dfs: list[pd.DataFrame]):
    """Pass in a dataframe containing raw games data extracted from nba api and an array of dataframes containing
     raw play by play data. Returns processed and cleaned games and plays dataframes ready to be written to DB."""

    games = Games(raw_games_df)
    pbp = PlayByPlay(raw_plays_dfs)

    return games.clean_and_return_games_df(), pbp.clean_and_return_plays()


def retrieve_and_return_raw_games_and_pbp_dfs(from_date: str, to_date: str):
    """Pass in a from-date and to-date in the format '%m/%d/%Y'. Returns a dataframe with raw games data from
    the nba api and an array of dataframes containing raw play by play data from each game in that date range."""

    api_client = NbaApiClient(from_date=from_date, to_date=to_date)
    raw_games_df = api_client.retrieve_games()
    game_ids = list(raw_games_df['GAME_ID'].unique())
    raw_plays_dfs = NbaApiClient.retrieve_and_return_plays_dfs(game_ids)

    return raw_games_df, raw_plays_dfs


def retrieve_and_return_players_to_add(engine, play_by_play_data: pd.DataFrame):
    """Pass in a database connection engine generated by SQLalchemy and a cleaned play by play dataframe. Returns
    a dataframe containing the players that appear in the play by play data that are not present in the database."""

    cur_session = sessionmaker(bind=engine)
    session = cur_session()
    query = session.query(Players)
    stmt = query.statement
    existing_players_dataframe = pd.read_sql(stmt, session.connection())
    comparator = PlayerComparator()
    players_to_add = comparator.compare_to_existing(existing_players_dataframe, play_by_play_data)
    return players_to_add


def write_data_to_sql(players_df: pd.DataFrame, games_df: pd.DataFrame, plays_df: pd.DataFrame, engine):
    """Pass in dataframes containing players data, games data, and play by play data ready to be written to db.
    Writes the data contained in the dataframes to the appropriate tables using SQLalchemy connection engine."""

    if len(players_df) > 0:
        players_df.to_sql('players', engine, if_exists='append', index=False)

    games_df.to_sql('games', engine, if_exists='append', index=False)
    plays_df.to_sql('plays', engine, if_exists='append', index=False)
